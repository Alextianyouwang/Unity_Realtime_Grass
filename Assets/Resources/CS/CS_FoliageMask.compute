
#pragma kernel CSMain

RWStructuredBuffer<float4> _MaskBuffer;
uint _MaxCount;
float _TileSize;
float _TileDimension;
float _CornerX;
float _CornerY;

float _Time;
float _Step;
uint _DownSamplingScale;

float3 _Center;
float _Radius;
float _Falloff;

#include "../../INCLUDE/HL_Noise.hlsl"

float SphericalMask(float3 pos, float3 center, float radius, float falloff)
{
    float3 dir = pos - center;
    return 1 - smoothstep(radius - falloff, radius, length(dir));
}

[numthreads(1024,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _MaxCount)
        return;
    
    int coordX = id.x / _TileDimension;
    int coordY = id.x % _TileDimension;
    
    int coordOriginalX = coordX;
    int coordOriginalY = coordY;

    coordX = floor(coordX / _DownSamplingScale);
    coordY = floor(coordY / _DownSamplingScale );
    
    float2 posXZ = float2(coordX * _TileSize + _CornerX, coordY * _TileSize  + _CornerY);
    float2 posXZOriginal = float2(coordOriginalX * _TileSize + _CornerX, coordOriginalY * _TileSize + _CornerY);
    float rand = rand2dTo1d(posXZ + _Time);
    float randOriginal = rand2dTo1d(posXZOriginal + _Time);
    

    
    float sphereMask =  SphericalMask(float3(posXZOriginal.x, 0, posXZOriginal.y), _Center, _Radius, _Falloff);
    // slightly overshoot the value to ensure a saturated coverage
    sphereMask = clamp(0, 1, (sphereMask - 0.5) * 1.001 + 0.5);
    sphereMask = step(randOriginal,sphereMask);
    _MaskBuffer[id.x] = float4(step(_Step,rand), sphereMask, 0, 0);

}
