#pragma kernel Vote

#include "../../INCLUDE/HL_PrefixSum.hlsl"

#pragma kernel Compact
#pragma kernel ClearArgs

struct SpawnData
{
    float3 positionWS;
    float hash;
    float4 clumpInfo;
    float4 postureData;
};


Texture2D<float4> _DensityMap;
StructuredBuffer<SpawnData> _SpawnBuffer;
StructuredBuffer<float4> _MaskBuffer;

RWStructuredBuffer<SpawnData> _CompactBuffer;
RWStructuredBuffer<uint> _ArgsBuffer;

uint _InstanceCount;
int _NumTilePerClusterSide;
float _ClusterBotLeftX, _ClusterBotLeftY, _TileSize;

float _MaxRenderDist;
float _DensityFalloffDist;
float4x4 _Camera_P, _Camera_V;
float _Camera_Near, _Camera_Far;
float _GrassBoundScale;
float _DensityFilter;
bool _EnableOcclusionCulling;

bool _UseMask;
bool _ReverseMask;

Texture2D<float> _HiZTexture;
SamplerState sampler_HiZTexture;



inline float LinearEyeDepth(float depth)
{
    // Reversed Z
    depth = 1 - depth;
    float x = 1 - _Camera_Far / _Camera_Near;
    float y = _Camera_Far / _Camera_Near;
    float z = x / _Camera_Far;
    float w = y / _Camera_Far;
    return 1.0 / ( z * depth  + w);
}
float invLerp(float from, float to, float value)
{
    return (value - from) / (to - from);
}
void SpaceConversion(float3 pos, out float3 posVS, out float3 posNDS, out float2 uv)
{
    posVS = mul(_Camera_V, float4(pos, 1)).xyz;
    float4 posCS = mul(_Camera_P, float4(posVS, 1));
    posNDS = posCS.xyz / posCS.w;
    posNDS.z = posCS.w;
    uv = posNDS.xy * 0.5 + 0.5;
}

[numthreads(128, 1, 1)]
void Vote (uint3 id : SV_DispatchThreadID)
{
    if (id.x >= _InstanceCount)
        return;
    
    float3 pos = _SpawnBuffer[id.x].positionWS;

    float hash = _SpawnBuffer[id.x].hash;
    
    int x = (pos.x - _ClusterBotLeftX) / _TileSize;
    int y = (pos.z - _ClusterBotLeftY) / _TileSize;
    

    float3 posNDS;
    float3 posVS;
    float2 uv;
    SpaceConversion(pos, posVS, posNDS, uv);

    float dist = posNDS.z / dot(normalize(posVS), float3(0, 0, -1));
    
    ///////////////////////////////////////////////////
    //  Does current spawn pos has grass? 
    float density = _DensityMap[int2(x,y)].x;
    bool hasGrass = step(hash, density);
    if (!hasGrass)
    {
        _VoteBuffer[id.x] = false;
        return;
    }
    ///////////////////////////////////////////////////
    
    ///////////////////////////////////////////////////
    //  Does current spawn pos are masked out? 
  if (_UseMask)
  {
      float mask = _MaskBuffer[x * _NumTilePerClusterSide + y].y;
      bool passMasking = _ReverseMask ? mask < 0.5 : mask > 0.5;
      if (!passMasking)
      {
          _VoteBuffer[id.x] = false;
          return;
      }
  }
  
   
    ///////////////////////////////////////////////////
    
    ///////////////////////////////////////////////////
    //  Does current spawn pos passes density filter?
        bool passDensityDrop = step(frac(hash * 12.9898 * 78.233), _DensityFilter);
    if (!passDensityDrop)
    {
        _VoteBuffer[id.x] = false;
        return;
    }
    ///////////////////////////////////////////////////
    
    ///////////////////////////////////////////////////
    //  Does current spawn pos passes distance drop?
    float remap = saturate(invLerp(_DensityFalloffDist, _MaxRenderDist, dist));
    remap = pow(remap, 0.3);
    bool passedDistDrop = step(hash, remap) == 0;
    if (!passedDistDrop)
    {
        _VoteBuffer[id.x] = false;
        return;
    }
    ///////////////////////////////////////////////////

    ///////////////////////////////////////////////////
    //  Does current spawn pos passes frustum culling?
    float rate = 1.1;
        bool isInView = (
    posNDS.x < -rate
    || posNDS.x > rate
    || posNDS.y > rate
    || posNDS.y < -rate
    || posNDS.z < -0.1
    || dist > _MaxRenderDist) ? 0 : 1;
    if (!isInView)
    {
        _VoteBuffer[id.x] = false;
        return;
    }
    ///////////////////////////////////////////////////

    ///////////////////////////////////////////////////
    //  Does current spawn pos passes occlusion culling?
    
    if (!_EnableOcclusionCulling)
    {
        _VoteBuffer[id.x] = true;
        return;
    }
        
    float b = _GrassBoundScale;
    float3 upperBoundPos = pos + float3(b, b, b);
    float3 upperBoundPosVS;
    float3 upperBoundPosNDS;
    float2 upperBoundUV;
    
    float3 lowerBoundPos = pos - float3(b, 0, b);
    float3 lowerBoundPosVS;
    float3 lowerBoundPosNDS;
    float2 lowerBoundUV;
    SpaceConversion(upperBoundPos, upperBoundPosVS, upperBoundPosNDS, upperBoundUV);
    SpaceConversion(lowerBoundPos, lowerBoundPosVS, lowerBoundPosNDS, lowerBoundUV);

    float lboundDepth = LinearEyeDepth(_HiZTexture.SampleLevel(sampler_HiZTexture, lowerBoundUV, 0));
    float uboundDepth = LinearEyeDepth(_HiZTexture.SampleLevel(sampler_HiZTexture, upperBoundUV, 0));
    float depth = LinearEyeDepth(_HiZTexture.SampleLevel(sampler_HiZTexture, uv, 0));
    bool passedOcclusion = posNDS.z > depth + 0.5 ?
        lowerBoundPosNDS.z < lboundDepth || upperBoundPosNDS.z < uboundDepth :
        true;
    if (!passedOcclusion)
    {
        _VoteBuffer[id.x] = false;
        return;
    }
    ///////////////////////////////////////////////////

    _VoteBuffer[id.x] = true;
}

[numthreads(2 * NUM_THREAD_GROUP, 1, 1)]
void Compact(uint3 id : SV_DispatchThreadID, uint3 groupID : SV_GroupID)
{
    if (id.x >= _InstanceCount)
        return;
    int groupSum = _GroupScanBufferOut[groupID.x];
    if (_VoteBuffer[id.x] == 1)
    {
        [unroll]
        for (uint i = 0; i < 3; i++)
        {
            uint offset = i * 5;
            InterlockedAdd(_ArgsBuffer[offset + 1], 1);
        }
        _CompactBuffer[_ScanBuffer[id.x] + groupSum] = _SpawnBuffer[id.x];
    }

}
[numthreads(1, 1, 1)]
void ClearArgs()
{
    [unroll]
    for (uint i = 0; i < 3; i++)
    {
        uint offset = i * 5;
        _ArgsBuffer[offset + 1] = 0;
    }
}



