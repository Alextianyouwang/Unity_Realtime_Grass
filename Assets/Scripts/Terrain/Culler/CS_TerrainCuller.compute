
#pragma kernel ParseMeshVertBuffer
#pragma kernel ParseMeshIndexBuffer
#pragma kernel ProcessMeshTriangle
#include "../../../INCLUDE/HL_PrefixSum.hlsl"
#pragma kernel Compact
#pragma kernel ClearArgs

StructuredBuffer<uint> _TargetMeshRawVertexBuffer;

struct SpawnData
{
    float3 positionWS;
    float3 normalWS;
    float3 color;
    float2 uv;
};
RWStructuredBuffer<SpawnData> _SpawnBuffer;
RWStructuredBuffer<uint> _ArgsBuffer;
float4x4 _LocalToWorld;


[numthreads(128,1,1)]
void ParseMeshVertBuffer(uint3 id : SV_DispatchThreadID)
{
    uint vertexStart = id.x * 15;
    float3 position = asfloat(uint3(
        _TargetMeshRawVertexBuffer[vertexStart],
        _TargetMeshRawVertexBuffer[vertexStart + 1],
        _TargetMeshRawVertexBuffer[vertexStart + 2]
    ));
    float3 normal = 
     asfloat(uint3(
        _TargetMeshRawVertexBuffer[vertexStart + 3],
        _TargetMeshRawVertexBuffer[vertexStart + 4],
        _TargetMeshRawVertexBuffer[vertexStart + 5]
    ));
    float4 tangent =
     asfloat(uint4(
        _TargetMeshRawVertexBuffer[vertexStart + 6],
        _TargetMeshRawVertexBuffer[vertexStart + 7],
        _TargetMeshRawVertexBuffer[vertexStart + 8],
        _TargetMeshRawVertexBuffer[vertexStart + 9]
    ));
   // float4 color =
   //  asfloat(uint4(
   //     _TargetMeshRawVertexBuffer[vertexStart + 10],
   //     _TargetMeshRawVertexBuffer[vertexStart + 11],
   //     _TargetMeshRawVertexBuffer[vertexStart + 12],
   //     _TargetMeshRawVertexBuffer[vertexStart + 13]
   // ));
    float2 uv0 =
     asfloat(uint2(
        _TargetMeshRawVertexBuffer[vertexStart + 11],
        _TargetMeshRawVertexBuffer[vertexStart + 12]
    ));
    SpawnData o;
    o.positionWS = mul(_LocalToWorld, float4(position, 1)).xyz;
    // o.positionOS = position;
    o.normalWS = mul(_LocalToWorld, float4(normal, 0)).xyz;
    o.color = 1;
    o.uv = uv0;
    _SpawnBuffer[id.x] = o;

}


struct UnitTriangle
{
    float3 p1;
    float3 p2;
    float3 p3;
};
StructuredBuffer<uint> _TargetMeshIndexBuffer;
RWStructuredBuffer<uint> _IndexBuffer;
RWStructuredBuffer<uint> _CompactIndexBuffer;
float4x4 _Camera_V, _Camera_P;
float _Camera_Near, _Camera_Far;
float3 _CameraPos;
Texture2D<float> _HiZTexture;
SamplerState sampler_HiZTexture;
uint _TriCount, _Use16Bit;

inline float LinearEyeDepth(float depth)
{
    // Reversed Z
    depth = 1 - depth;
    float x = 1 - _Camera_Far / _Camera_Near;
    float y = _Camera_Far / _Camera_Near;
    float z = x / _Camera_Far;
    float w = y / _Camera_Far;
    return 1.0 / (z * depth + w);
}

void SpaceConversion(float3 pos, out float3 posVS, out float3 posNDS, out float2 uv)
{
    posVS = mul(_Camera_V, float4(pos, 1)).xyz;
    float4 posCS = mul(_Camera_P, float4(posVS, 1));
    posNDS = posCS.xyz / posCS.w;
    posNDS.z = posCS.w;
    uv = posNDS.xy * 0.5 + 0.5;
}
uint2 UnpackUShort2(uint packedValue)
{

    return uint2(packedValue & 0xFFFF, packedValue >> 16);
}
[numthreads(128, 1, 1)]
void ParseMeshIndexBuffer(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    uint floorHalf = floor(_TriCount / 2);
    if (_Use16Bit == 1)
    {
        if (index >= (_TriCount % 2 == 0 ? floorHalf : floorHalf + 1))
            return;

        uint2 unpacked = UnpackUShort2(_TargetMeshIndexBuffer[index]);
        _IndexBuffer[index * 2] = unpacked.x;
        _IndexBuffer[index * 2 + 1] = unpacked.y;
    }
    else
    {
        if (index >= _TriCount)
            return;
        _IndexBuffer[index] = _TargetMeshIndexBuffer[index];
    }
}
[numthreads(128, 1, 1)]
void ProcessMeshTriangle(uint3 id : SV_DispatchThreadID)
{


    UnitTriangle t;
    uint triStart = id.x * 3;
    SpawnData v1 = _SpawnBuffer[_IndexBuffer[triStart]];
    SpawnData v2 = _SpawnBuffer[_IndexBuffer[triStart + 1]];
    SpawnData v3 = _SpawnBuffer[_IndexBuffer[triStart + 2]];
    t.p1 = v1.positionWS;
    t.p2 = v2.positionWS;
    t.p3 = v3.positionWS;
    
    
    float3 triNormal = normalize((v1.normalWS + v2.normalWS + v3.normalWS) * 0.33333);
    float3 viewDir = normalize(_CameraPos - (t.p1 + t.p2 + t.p3) * 0.33333);
    bool passedOrientationCull = dot(triNormal, viewDir) > 0;
    
    if (!passedOrientationCull)
    {
        _VoteBuffer[triStart] = false;
        _VoteBuffer[triStart + 1] = false;
        _VoteBuffer[triStart + 2] = false;
        return;
    }
    

    float3 p1NDS, p2NDS, p3NDS;
    float3 p1VS, p2VS, p3VS;
    float2 p1UV, p2UV, p3UV;
  
    SpaceConversion(t.p1, p1VS, p1NDS, p1UV);
    SpaceConversion(t.p2, p2VS, p2NDS, p2UV);
    SpaceConversion(t.p3, p3VS, p3NDS, p3UV);
    
  
    float rate = 1.0;
    bool passedFrustumCull = ((
            p1NDS.x > -rate && p1NDS.x < rate &&
            p1NDS.y > -rate && p1NDS.y < rate &&
            p1NDS.z > 0
        ) ||
        (
            p2NDS.x > -rate && p2NDS.x < rate &&
            p2NDS.y > -rate && p2NDS.y < rate &&
            p2NDS.z > 0
        ) ||
        (
            p3NDS.x > -rate && p3NDS.x < rate &&
            p3NDS.y > -rate && p3NDS.y < rate &&
            p3NDS.z > 0
        ));
  
    if (!passedFrustumCull)
    {
        _VoteBuffer[triStart] = false;
        _VoteBuffer[triStart + 1] = false;
        _VoteBuffer[triStart + 2] = false;
        return;
    }
  
    
  
   float p1Depth = LinearEyeDepth(_HiZTexture.SampleLevel(sampler_HiZTexture, p1UV, 0));
    float p2Depth = LinearEyeDepth(_HiZTexture.SampleLevel(sampler_HiZTexture, p2UV, 0));
    float p3Depth = LinearEyeDepth(_HiZTexture.SampleLevel(sampler_HiZTexture, p3UV, 0));
  
    bool passedOcclusionCull =
        (p1Depth > p1NDS.z - 0.5
        || p2Depth > p2NDS.z - 0.5
        || p3Depth > p3NDS.z - 0.5
    );
    if (!passedOcclusionCull)
    {
        _VoteBuffer[triStart] = false;
        _VoteBuffer[triStart + 1] = false;
        _VoteBuffer[triStart + 2] = false;
        return;
    }

    _VoteBuffer[triStart] = true;
    _VoteBuffer[triStart + 1] = true;
    _VoteBuffer[triStart + 2] = true;

    
   //_SpawnBuffer[_TargetMeshIndexBuffer[triStart]].color.xy = p1UV;
   //_SpawnBuffer[_TargetMeshIndexBuffer[triStart + 1]].color.xy = p1UV;
   //_SpawnBuffer[_TargetMeshIndexBuffer[triStart + 2]].color.xy = p1UV;
}
[numthreads(2 * NUM_THREAD_GROUP, 1, 1)]
void Compact(uint3 id : SV_DispatchThreadID, uint3 groupID : SV_GroupID)
{

    int groupSum = _GroupScanBufferOut[groupID.x];
    if (_VoteBuffer[id.x] == 1)
    {
        InterlockedAdd(_ArgsBuffer[0], 1);
        
        _CompactIndexBuffer[_ScanBuffer[id.x] + groupSum] = _IndexBuffer[id.x];
    }

}

[numthreads(1, 1, 1)]
void ClearArgs()
{
    _ArgsBuffer[0] = 0;
}

